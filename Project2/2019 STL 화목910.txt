
--------------------------------------------------------
Thu Mar  7 17:56:19 2019
--------------------------------------------------------

#include <iostream>
#include <algorithm>
#include <fstream>
#include <iterator>
#include <string>
#include <chrono>

void save(std::string);

int main()
{
	save("소스.cpp");
}

void save(std::string name)
{
	//name을 읽기 모드로 오픈한다.
	std::ifstream in(name);
	//기록할 파일을 쓰기 모드(덧붙이기)로 오픈한다.
	std::ofstream out("2019 STL 화목910.txt", std::ios::app);
	//현재 시간을 string에 저장하기.
	auto now = std::chrono::system_clock::now();
	auto date = std::chrono::system_clock::to_time_t(now);
	std::string time(ctime(&date));
	//저장한 시간도 중요한다.
	out << std::endl << std::endl;
	out << "--------------------------------------------------------" << std::endl;
	out << time;
	out << "--------------------------------------------------------" << std::endl;
	out << std::endl;

	//모든 내용을 읽어서 쓴다.
	std::copy(std::istreambuf_iterator<char>(in), 
		std::istreambuf_iterator<char>(), 
		std::ostreambuf_iterator<char>(out));
}

-------------------------------
Thu Mar  7 17:57:43 2019
-------------------------------

#include <iostream>
#include <algorithm>
#include <fstream>
#include <iterator>
#include <string>
#include <chrono>

void save(std::string);

int main()
{
	save("소스.cpp");
}

void save(std::string name)
{
	//name을 읽기 모드로 오픈한다.
	std::ifstream in(name);
	//기록할 파일을 쓰기 모드(덧붙이기)로 오픈한다.
	std::ofstream out("2019 STL 화목910.txt", std::ios::app);
	//현재 시간을 string에 저장하기.
	auto now = std::chrono::system_clock::now();
	auto date = std::chrono::system_clock::to_time_t(now);
	std::string time(ctime(&date));
	//저장한 시간도 중요한다.
	out << std::endl << std::endl;
	out << "-------------------------------" << std::endl;
	out << time;
	out << "-------------------------------" << std::endl;
	out << std::endl;

	//모든 내용을 읽어서 쓴다.
	std::copy(std::istreambuf_iterator<char>(in), 
		std::istreambuf_iterator<char>(), 
		std::ostreambuf_iterator<char>(out));
}

-------------------------
Thu Mar  7 17:58:25 2019
-------------------------

#include <iostream>
#include <algorithm>
#include <fstream>
#include <iterator>
#include <string>
#include <chrono>

void save(std::string);

int main()
{
	save("소스.cpp");
}

void save(std::string name)
{
	//name을 읽기 모드로 오픈한다.
	std::ifstream in(name);
	//기록할 파일을 쓰기 모드(덧붙이기)로 오픈한다.
	std::ofstream out("2019 STL 화목910.txt", std::ios::app);
	//현재 시간을 string에 저장하기.
	auto now = std::chrono::system_clock::now();
	auto date = std::chrono::system_clock::to_time_t(now);
	std::string time(ctime(&date));
	//저장한 시간도 중요한다.
	out << std::endl << std::endl;
	out << "-------------------------" << std::endl;
	out << time;
	out << "-------------------------" << std::endl;
	out << std::endl;

	//모든 내용을 읽어서 쓴다.
	std::copy(std::istreambuf_iterator<char>(in), 
		std::istreambuf_iterator<char>(), 
		std::ostreambuf_iterator<char>(out));
}

=========================
Thu Mar  7 18:01:21 2019
=========================

#include "save.h"

int main()
{
	save("소스.cpp");
}



=========================
Thu Mar  7 18:21:09 2019
=========================

#include "save.h"

void save(std::string name)
{
	//name을 읽기 모드로 오픈한다.
	std::ifstream in(name);
	//기록할 파일을 쓰기 모드(덧붙이기)로 오픈한다.
	std::ofstream out("2019 STL 화목910.txt", std::ios::app);
	//현재 시간을 string에 저장하기.
	auto now = std::chrono::system_clock::now();
	auto date = std::chrono::system_clock::to_time_t(now);
	std::string time(ctime(&date));
	//저장한 시간도 중요한다.
	out << std::endl << std::endl;
	out << "=========================" << std::endl;
	out << time;
	out << "=========================" << std::endl;
	out << std::endl;

	//모든 내용을 읽어서 쓴다.
	std::copy(std::istreambuf_iterator<char>(in),
		std::istreambuf_iterator<char>(),
		std::ostreambuf_iterator<char>(out));
}

=========================
Thu Mar  7 18:32:02 2019
=========================

//------------------------------------------------------------
//2019.STL 3.7 목9,10
//
// - 자료를 파일에 저장해 보기
// - 랜덤 정수를 만들기
// - 정수를 정렬하기
// - 정렬한 결과를 파일에 저장하기
// - 파일에 저장한 정수를 읽어 화면에 출력하기
//
// - 책 내용은 다음 주 부터.....
//------------------------------------------------------------
#include "save.h"
using namespace std;

int main()
{
	int a[]{ 1,3,5,7,9,2,4,6,8,10 };

	sort(begin(a), end(a));

	save("소스.cpp");
}

=========================
Thu Mar  7 18:33:28 2019
=========================

//------------------------------------------------------------
//2019.STL 3.7 목9,10
//
// - 자료를 파일에 저장해 보기
// - 랜덤 정수를 만들기
// - 정수를 정렬하기
// - 정렬한 결과를 파일에 저장하기
// - 파일에 저장한 정수를 읽어 화면에 출력하기
//
// - 책 내용은 다음 주 부터.....
//------------------------------------------------------------
#include "save.h"
using namespace std;

int main()
{
	int a[]{ 1,3,5,7,9,2,4,6,8,10 };

	sort(begin(a), end(a));

	for (int d : a)
		cout << d << ' ';
	cout << endl;

	save("소스.cpp");
}

=========================
Thu Mar  7 18:38:09 2019
=========================

//------------------------------------------------------------
//2019.STL 3.7 목9,10
//
// - 자료를 파일에 저장해 보기
// - 랜덤 정수를 만들기
// - 정수를 정렬하기
// - 정렬한 결과를 파일에 저장하기
// - 파일에 저장한 정수를 읽어 화면에 출력하기
//
// - 책 내용은 다음 주 부터.....
//------------------------------------------------------------
#include "save.h"
using namespace std;

bool how(int a, int b) {
	return a > b;
}

int main()
{
	int a[]{ 1,3,5,7,9,2,4,6,8,10 };

	sort(&a[0],&a[10],how);

	for (int d : a)
		cout << d << ' ';
	cout << endl;

	save("소스.cpp");
}

=========================
Thu Mar  7 18:43:12 2019
=========================

//------------------------------------------------------------
//2019.STL 3.7 목9,10
//
// - 자료를 파일에 저장해 보기
// - 랜덤 정수를 만들기
// - 정수를 정렬하기
// - 정렬한 결과를 파일에 저장하기
// - 파일에 저장한 정수를 읽어 화면에 출력하기
//
// - 책 내용은 다음 주 부터.....
//------------------------------------------------------------
#include "save.h"
using namespace std;

int main()
{
	int a[]{ 1,3,5,7,9,2,4,6,8,10 };

	sort(begin(a), end(a), [](int a, int b) {
		return a > b;
	});

	for (int d : a)
		cout << d << ' ';
	cout << endl;

	save("소스.cpp");
}

=========================
Thu Mar  7 18:49:20 2019
=========================

//------------------------------------------------------------
//2019.STL 3.7 목9,10
//
// - 자료를 파일에 저장해 보기
// - 랜덤 정수를 만들기
// - 정수를 정렬하기
// - 정렬한 결과를 파일에 저장하기
// - 파일에 저장한 정수를 읽어 화면에 출력하기
//
// - 책 내용은 다음 주 부터.....
//------------------------------------------------------------
#include "save.h"
#include <random>
using namespace std;

int main()
{
	int a[10000];

	//10000개를 임의의 값으로 채워 넣자.
	uniform_int_distribution<> uid;
	default_random_engine dre;
	for (int i = 0; i < 10000; ++i)
		a[i] = uid(dre);

	/*sort(begin(a), end(a), [](int a, int b) {
		return a > b;
	});*/

	for (int d : a)
		cout << d << ' ';
	cout << endl;

	save("소스.cpp");
}

=========================
Thu Mar  7 18:52:11 2019
=========================

//------------------------------------------------------------
//2019.STL 3.7 목9,10
//
// - 자료를 파일에 저장해 보기
// - 랜덤 정수를 만들기
// - 정수를 정렬하기
// - 정렬한 결과를 파일에 저장하기
// - 파일에 저장한 정수를 읽어 화면에 출력하기
//
// - 책 내용은 다음 주 부터.....
//------------------------------------------------------------
#include "save.h"
#include <random>
using namespace std;

int main()
{
	int a[10000];

	//10000개를 임의의 값으로 채워 넣자.
	uniform_int_distribution<> uid;
	default_random_engine dre;
	for (int i = 0; i < 10000; ++i)
		a[i] = uid(dre);

	sort(begin(a), end(a));

	for (int d : a)
		cout << d << ' ';
	cout << endl;

	save("소스.cpp");
}

=========================
Thu Mar  7 18:52:30 2019
=========================

//------------------------------------------------------------
//2019.STL 3.7 목9,10
//
// - 자료를 파일에 저장해 보기
// - 랜덤 정수를 만들기
// - 정수를 정렬하기
// - 정렬한 결과를 파일에 저장하기
// - 파일에 저장한 정수를 읽어 화면에 출력하기
//
// - 책 내용은 다음 주 부터.....
//------------------------------------------------------------
#include "save.h"
#include <random>
using namespace std;

int main()
{
	int a[10000];

	//10000개를 임의의 값으로 채워 넣자.
	uniform_int_distribution<> uid(0,1000000);
	default_random_engine dre;
	for (int i = 0; i < 10000; ++i)
		a[i] = uid(dre);

	sort(begin(a), end(a));

	for (int d : a)
		cout << d << ' ';
	cout << endl;

	save("소스.cpp");
}

=========================
Thu Mar  7 18:54:06 2019
=========================

//------------------------------------------------------------
//2019.STL 3.7 목9,10
//
// - 자료를 파일에 저장해 보기
// - 랜덤 정수를 만들기
// - 정수를 정렬하기
// - 정렬한 결과를 파일에 저장하기
// - 파일에 저장한 정수를 읽어 화면에 출력하기
//
// - 책 내용은 다음 주 부터.....
//------------------------------------------------------------
#include "save.h"
#include <random>
using namespace std;

int main()
{
	int a[10000];

	//10000개를 임의의 값으로 채워 넣자.
	uniform_int_distribution<> uid(0,100000000);
	default_random_engine dre;
	for (int i = 0; i < 10000; ++i)
		a[i] = uid(dre);

	sort(begin(a), end(a));

	for (int d : a)
		cout << d << ' ';
	cout << endl;

	save("소스.cpp");
}

=========================
Thu Mar  7 18:57:14 2019
=========================

//------------------------------------------------------------
//2019.STL 3.7 목9,10
//
// - 자료를 파일에 저장해 보기
// - 랜덤 정수를 만들기
// - 정수를 정렬하기
// - 정렬한 결과를 파일에 저장하기
// - 파일에 저장한 정수를 읽어 화면에 출력하기
//
// - 책 내용은 다음 주 부터.....
//------------------------------------------------------------
#include "save.h"
#include <random>
using namespace std;

int main()
{
	int a[10000];

	//10000개를 임의의 값으로 채워 넣자.
	uniform_int_distribution<> uid(0,100000000);
	default_random_engine dre;
	for (int& d:a)
		d = uid(dre);

	sort(begin(a), end(a));

	for (int& d : a)
		cout << d << ' ';
	cout << endl;

	save("소스.cpp");
}

=========================
Tue Mar 12 17:47:43 2019
=========================

//------------------------------------------------------------
//2019.STL 3.12 화9,10
//
// - 자료를 파일에 저장해 보기
// - 랜덤 정수를 만들기
// - 정수를 정렬하기
// - 정렬한 결과를 파일에 저장하기
// - 파일에 저장한 정수를 읽어 화면에 출력하기
//
// - 이 내용을 객체로 (class Dog)
// - smart pointer
// - callable type
// 언제나 그러하듯이 프로그래밍은 훈련을 동반한다.
// 모르면 맞아야지
// - 알고리즘 시간재기
// 구분자를 넣어도 문법 오류가 아님!
//------------------------------------------------------------
#include "save.h"
#include <random>
using namespace std;
// 정수 100만개를 전역변수로 만들었다.(100만개는 Data Segment에 위치한다.)
// 실행파일에는 어떤 변화가 있는가?
// int a[1'000'000];
// int a[1'000'000]{1};
// 이 두 경우를 살펴볼 것
int a[1'000'000];

int main()
{

	//10000개를 임의의 값으로 채워 넣자.
	uniform_int_distribution<> uid(0, 100000000);
	default_random_engine dre;
	for (int& d : a)
		d = uid(dre);

	sort(begin(a), end(a));

	// 정렬 후 앞에서 100개만 출력한다.
	for (int i = 0; i < 100; ++i)
		cout << a[i] << ' ';
	cout << endl;

	save("소스.cpp");
}

=========================
Tue Mar 12 17:48:06 2019
=========================

//------------------------------------------------------------
//2019.STL 3.12 화9,10
//
// - 자료를 파일에 저장해 보기
// - 랜덤 정수를 만들기
// - 정수를 정렬하기
// - 정렬한 결과를 파일에 저장하기
// - 파일에 저장한 정수를 읽어 화면에 출력하기
//
// - 이 내용을 객체로 (class Dog)
// - smart pointer
// - callable type
// 언제나 그러하듯이 프로그래밍은 훈련을 동반한다.
// 모르면 맞아야지
// - 알고리즘 시간재기
// 구분자를 넣어도 문법 오류가 아님!
//------------------------------------------------------------
#include "save.h"
#include <random>
using namespace std;
// 정수 100만개를 전역변수로 만들었다.(100만개는 Data Segment에 위치한다.)
// 실행파일에는 어떤 변화가 있는가?
// int a[1'000'000];
// int a[1'000'000]{1};
// 이 두 경우를 살펴볼 것
int a[1'000'000];

int main()
{

	//10000개를 임의의 값으로 채워 넣자.
	uniform_int_distribution<> uid(0, 10);
	default_random_engine dre;
	for (int& d : a)
		d = uid(dre);

	sort(begin(a), end(a));

	// 정렬 후 앞에서 100개만 출력한다.
	for (int i = 0; i < 100; ++i)
		cout << a[i] << ' ';
	cout << endl;

	save("소스.cpp");
}

=========================
Tue Mar 12 17:48:46 2019
=========================

//------------------------------------------------------------
//2019.STL 3.12 화9,10
//
// - 자료를 파일에 저장해 보기
// - 랜덤 정수를 만들기
// - 정수를 정렬하기
// - 정렬한 결과를 파일에 저장하기
// - 파일에 저장한 정수를 읽어 화면에 출력하기
//
// - 이 내용을 객체로 (class Dog)
// - smart pointer
// - callable type
// 언제나 그러하듯이 프로그래밍은 훈련을 동반한다.
// 모르면 맞아야지
// - 알고리즘 시간재기
// 구분자를 넣어도 문법 오류가 아님!
//------------------------------------------------------------
#include "save.h"
#include <random>
using namespace std;
// 정수 100만개를 전역변수로 만들었다.(100만개는 Data Segment에 위치한다.)
// 실행파일에는 어떤 변화가 있는가?
// int a[1'000'000];
// int a[1'000'000]{1};
// 이 두 경우를 살펴볼 것
int a[1'000'000];

int main()
{

	//10000개를 임의의 값으로 채워 넣자.
	uniform_int_distribution<> uid(0, 1'000'000);
	default_random_engine dre;
	for (int& d : a)
		d = uid(dre);

	sort(begin(a), end(a));

	// 정렬 후 앞에서 100개만 출력한다.
	for (int i = 0; i < 100; ++i)
		cout << a[i] << ' ';
	cout << endl;

	save("소스.cpp");
}

=========================
Tue Mar 12 17:54:45 2019
=========================

//------------------------------------------------------------
//2019.STL 3.12 화9,10
//
// - 자료를 파일에 저장해 보기
// - 랜덤 정수를 만들기
// - 정수를 정렬하기
// - 정렬한 결과를 파일에 저장하기
// - 파일에 저장한 정수를 읽어 화면에 출력하기
//
// - 이 내용을 객체로 (class Dog)
// - smart pointer
// - callable type
// 언제나 그러하듯이 프로그래밍은 훈련을 동반한다.
// 모르면 맞아야지
// - 알고리즘 시간재기
// 구분자를 넣어도 문법 오류가 아님!
//------------------------------------------------------------
#include "save.h"
#include <random>
using namespace std;
// 정수 100만개를 전역변수로 만들었다.(100만개는 Data Segment에 위치한다.)
// 실행파일에는 어떤 변화가 있는가?
// int a[1'000'000];
// int a[1'000'000]{1};
// 이 두 경우를 살펴볼 것
// 전역 변수는 프로그램 종료 시에 메모리를 해제하기 때문에
// 낭비가 심해질 수 있다.
// 그러니 필요할 때만 사용할 수 있도록 하자.

int main()
{

	int* a=new int[1'000'000];
	//10000개를 임의의 값으로 채워 넣자.
	uniform_int_distribution<> uid(0, 1'000'000);
	default_random_engine dre;
	for (int i = 0; i < 1'000'000; ++i)
		a[i] = uid(dre);

	sort(a, a+1'000'000);

	// 정렬 후 앞에서 100개만 출력한다.
	for (int i = 0; i < 100; ++i)
		cout << a[i] << ' ';
	cout << endl;

	save("소스.cpp");
}

=========================
Tue Mar 12 17:59:30 2019
=========================

//------------------------------------------------------------
//2019.STL 3.12 화9,10
//
// - 자료를 파일에 저장해 보기
// - 랜덤 정수를 만들기
// - 정수를 정렬하기
// - 정렬한 결과를 파일에 저장하기
// - 파일에 저장한 정수를 읽어 화면에 출력하기
//
// - 이 내용을 객체로 (class Dog)
// - smart pointer
// - callable type
// 언제나 그러하듯이 프로그래밍은 훈련을 동반한다.
// 모르면 맞아야지
// - 알고리즘 시간재기
// 구분자를 넣어도 문법 오류가 아님!
//------------------------------------------------------------
#include "save.h"
#include <random>
using namespace std;
// 정수 100만개를 전역변수로 만들었다.(100만개는 Data Segment에 위치한다.)
// 실행파일에는 어떤 변화가 있는가?
// int a[1'000'000];
// int a[1'000'000]{1};
// 이 두 경우를 살펴볼 것
// 전역 변수는 프로그램 종료 시에 메모리를 해제하기 때문에
// 낭비가 심해질 수 있다.
// 그러니 필요할 때만 사용할 수 있도록 하자.

int main()
{
	//사용자가 입력한 숫자만큼 정수를 확보하고 랜덤값으로 초기화 정렬 후 출력
	int* a;
	
	cout << "동적으로 할당할 정수의 갯수 : ";
	int num;
	cin >> num;

	//갯수만큼 할당
	a = new int[num];

	uniform_int_distribution<> uid(0, 1'000'000);
	default_random_engine dre;
	for (int i = 0; i < num; ++i)
		a[i] = uid(dre);

	//정렬 전 앞에서 100개 출력
	cout << "정렬 전" << endl;
	for (int i = 0; i < 100; ++i)
		cout << a[i] << ' ';
	cout << endl;

	sort(a, a+num);

	// 정렬 후 앞에서 100개만 출력한다.
	cout << "정렬 후" << endl;
	for (int i = 0; i < 100; ++i)
		cout << a[i] << ' ';
	cout << endl;

	save("소스.cpp");
}

=========================
Tue Mar 12 18:01:37 2019
=========================

//------------------------------------------------------------
//2019.STL 3.12 화9,10
//
// - 자료를 파일에 저장해 보기
// - 랜덤 정수를 만들기
// - 정수를 정렬하기
// - 정렬한 결과를 파일에 저장하기
// - 파일에 저장한 정수를 읽어 화면에 출력하기
//
// - 이 내용을 객체로 (class Dog)
// - smart pointer
// - callable type
// 언제나 그러하듯이 프로그래밍은 훈련을 동반한다.
// 모르면 맞아야지
// - 알고리즘 시간재기
// 구분자를 넣어도 문법 오류가 아님!
//------------------------------------------------------------
#include "save.h"
#include <random>
using namespace std;
// 정수 100만개를 전역변수로 만들었다.(100만개는 Data Segment에 위치한다.)
// 실행파일에는 어떤 변화가 있는가?
// int a[1'000'000];
// int a[1'000'000]{1};
// 이 두 경우를 살펴볼 것
// 전역 변수는 프로그램 종료 시에 메모리를 해제하기 때문에
// 낭비가 심해질 수 있다.
// 그러니 필요할 때만 사용할 수 있도록 하자.

int main()
{
	//사용자가 입력한 숫자만큼 정수를 확보하고 랜덤값으로 초기화 정렬 후 출력
	int* a;

	//반복 구문 시작
	while(true)
	{
		cout << "동적으로 할당할 정수의 갯수 : ";
		int num;
		cin >> num;

		//갯수만큼 할당
		a = new int[num];

		uniform_int_distribution<> uid(0, 1'000'000);
		default_random_engine dre;
		for (int i = 0; i < num; ++i)
			a[i] = uid(dre);

		//정렬 전 앞에서 100개 출력
		cout << "정렬 전" << endl;
		for (int i = 0; i < 100; ++i)
			cout << a[i] << ' ';
		cout << endl;

		sort(a, a + num);

		// 정렬 후 앞에서 100개만 출력한다.
		cout << "정렬 후" << endl;
		for (int i = 0; i < 100; ++i)
			cout << a[i] << ' ';
		cout << endl;

		save("소스.cpp");

	}
}

=========================
Tue Mar 12 18:02:04 2019
=========================

//------------------------------------------------------------
//2019.STL 3.12 화9,10
//
// - 자료를 파일에 저장해 보기
// - 랜덤 정수를 만들기
// - 정수를 정렬하기
// - 정렬한 결과를 파일에 저장하기
// - 파일에 저장한 정수를 읽어 화면에 출력하기
//
// - 이 내용을 객체로 (class Dog)
// - smart pointer
// - callable type
// 언제나 그러하듯이 프로그래밍은 훈련을 동반한다.
// 모르면 맞아야지
// - 알고리즘 시간재기
// 구분자를 넣어도 문법 오류가 아님!
//------------------------------------------------------------
#include "save.h"
#include <random>
using namespace std;
// 정수 100만개를 전역변수로 만들었다.(100만개는 Data Segment에 위치한다.)
// 실행파일에는 어떤 변화가 있는가?
// int a[1'000'000];
// int a[1'000'000]{1};
// 이 두 경우를 살펴볼 것
// 전역 변수는 프로그램 종료 시에 메모리를 해제하기 때문에
// 낭비가 심해질 수 있다.
// 그러니 필요할 때만 사용할 수 있도록 하자.

int main()
{
	//사용자가 입력한 숫자만큼 정수를 확보하고 랜덤값으로 초기화 정렬 후 출력
	int* a;

	//반복 구문 시작
	while(true)
	{
		cout << "동적으로 할당할 정수의 갯수 : ";
		int num;
		cin >> num;

		//갯수만큼 할당
		a = new int[num];

		uniform_int_distribution<> uid(0, 1'000'000);
		default_random_engine dre;
		for (int i = 0; i < num; ++i)
			a[i] = uid(dre);

		//정렬 전 앞에서 100개 출력
		cout << "정렬 전" << endl;
		for (int i = 0; i < 100; ++i)
			cout << a[i] << ' ';
		cout << endl;

		sort(a, a + num);

		// 정렬 후 앞에서 100개만 출력한다.
		cout << "정렬 후" << endl;
		for (int i = 0; i < 100; ++i)
			cout << a[i] << ' ';
		cout << endl;

		save("소스.cpp");

	}
}

=========================
Tue Mar 12 18:03:25 2019
=========================

//------------------------------------------------------------
//2019.STL 3.12 화9,10
//
// - 자료를 파일에 저장해 보기
// - 랜덤 정수를 만들기
// - 정수를 정렬하기
// - 정렬한 결과를 파일에 저장하기
// - 파일에 저장한 정수를 읽어 화면에 출력하기
//
// - 이 내용을 객체로 (class Dog)
// - smart pointer
// - callable type
// 언제나 그러하듯이 프로그래밍은 훈련을 동반한다.
// 모르면 맞아야지
// - 알고리즘 시간재기
// 구분자를 넣어도 문법 오류가 아님!
//------------------------------------------------------------
#include "save.h"
#include <random>
using namespace std;
// 정수 100만개를 전역변수로 만들었다.(100만개는 Data Segment에 위치한다.)
// 실행파일에는 어떤 변화가 있는가?
// int a[1'000'000];
// int a[1'000'000]{1};
// 이 두 경우를 살펴볼 것
// 전역 변수는 프로그램 종료 시에 메모리를 해제하기 때문에
// 낭비가 심해질 수 있다.
// 그러니 필요할 때만 사용할 수 있도록 하자.

int main()
{
	//사용자가 입력한 숫자만큼 정수를 확보하고 랜덤값으로 초기화 정렬 후 출력
	int* a;

	//반복 구문 시작
	while(true)
	{
		cout << "동적으로 할당할 정수의 갯수 : ";
		int num;
		cin >> num;

		//갯수만큼 할당
		a = new int[num];

		uniform_int_distribution<> uid(0, 1'000'000);
		default_random_engine dre;
		for (int i = 0; i < num; ++i)
			a[i] = uid(dre);

		//정렬 전 앞에서 100개 출력
		cout << "정렬 전" << endl;
		for (int i = 0; i < 100; ++i)
			cout << a[i] << ' ';
		cout << endl;

		sort(a, a + num);

		// 정렬 후 앞에서 100개만 출력한다.
		cout << "정렬 후" << endl;
		for (int i = 0; i < 100; ++i)
			cout << a[i] << ' ';
		cout << endl;

		save("소스.cpp");

	}
}

=========================
Tue Mar 12 18:30:56 2019
=========================

//------------------------------------------------------------
//2019.STL 3.12 화9,10
//
// - 자료를 파일에 저장해 보기
// - 정렬한 결과를 파일에 저장하기
//
// - 이 내용을 객체로 (class Dog)
// - smart pointer
// - callable type
// 언제나 그러하듯이 프로그래밍은 훈련을 동반한다.
// 모르면 맞아야지
// - 알고리즘 시간재기
// 구분자를 넣어도 문법 오류가 아님!
//------------------------------------------------------------
#include "save.h"
#include <random>
using namespace std;

//정수 만개를 랜덤값으로 초기화 정렬 후, (uid(dre), 0, 100'000)
//"정수만개오름차순.dat"으로 저장
//파일 크기를 생각하면서 작성

int main()
{
	uniform_int_distribution<> uid(0, 100'000);
	default_random_engine dre;

	int a[10000];

	for (int& d : a)
		d = uid(dre);

	sort(begin(a), end(a));

	ofstream out("정수만개오름차순.dat");

	for (int d : a)
		out << d << ' ';

	save("소스.cpp");
}

=========================
Tue Mar 12 18:32:42 2019
=========================

//------------------------------------------------------------
//2019.STL 3.12 화9,10
//
// - 자료를 파일에 저장해 보기
// - 정렬한 결과를 파일에 저장하기
//
// - 이 내용을 객체로 (class Dog)
// - smart pointer
// - callable type
// 언제나 그러하듯이 프로그래밍은 훈련을 동반한다.
// 모르면 맞아야지
// - 알고리즘 시간재기
// 구분자를 넣어도 문법 오류가 아님!
//------------------------------------------------------------
#include "save.h"
#include <random>
using namespace std;

//정수 만개를 랜덤값으로 초기화 정렬 후, (uid(dre), 0, 100'000)
//"정수만개오름차순.dat"으로 저장
//파일 크기를 생각하면서 작성

int main()
{
	uniform_int_distribution<> uid;
	default_random_engine dre;

	int a[10000];

	for (int& d : a)
		d = uid(dre);

	sort(begin(a), end(a));

	ofstream out("정수만개오름차순.dat");

	for (int d : a)
		out << d << ' ';

	save("소스.cpp");
}

=========================
Tue Mar 12 18:35:50 2019
=========================

//------------------------------------------------------------
//2019.STL 3.12 화9,10
//
// - 자료를 파일에 저장해 보기
// - 정렬한 결과를 파일에 저장하기
//
// - 이 내용을 객체로 (class Dog)
// - smart pointer
// - callable type
// 언제나 그러하듯이 프로그래밍은 훈련을 동반한다.
// 모르면 맞아야지
// - 알고리즘 시간재기
// 구분자를 넣어도 문법 오류가 아님!
//------------------------------------------------------------
#include "save.h"
#include <random>
using namespace std;

//정수 만개를 랜덤값으로 초기화 정렬 후, (uid(dre), 0, 100'000)
//"정수만개오름차순.dat"으로 저장
//파일 크기를 생각하면서 작성


//정수 만개를 저장하려면 필요한 공간은 몇 바이트인가?
int main()
{
	uniform_int_distribution<> uid(0,100'000);
	default_random_engine dre;

	int a[10000];

	for (int& d : a)
		d = uid(dre);

	sort(begin(a), end(a));

	ofstream out("정수만개오름차순.dat");

	int cnt = 1;
	for (int d : a)
	{
		if (cnt++ % 10 == 0)
		{
			cout << endl;
		}
		out << d << ' ';
	}

	save("소스.cpp");
}

=========================
Tue Mar 12 18:36:06 2019
=========================

//------------------------------------------------------------
//2019.STL 3.12 화9,10
//
// - 자료를 파일에 저장해 보기
// - 정렬한 결과를 파일에 저장하기
//
// - 이 내용을 객체로 (class Dog)
// - smart pointer
// - callable type
// 언제나 그러하듯이 프로그래밍은 훈련을 동반한다.
// 모르면 맞아야지
// - 알고리즘 시간재기
// 구분자를 넣어도 문법 오류가 아님!
//------------------------------------------------------------
#include "save.h"
#include <random>
using namespace std;

//정수 만개를 랜덤값으로 초기화 정렬 후, (uid(dre), 0, 100'000)
//"정수만개오름차순.dat"으로 저장
//파일 크기를 생각하면서 작성


//정수 만개를 저장하려면 필요한 공간은 몇 바이트인가?
int main()
{
	uniform_int_distribution<> uid(0,100'000);
	default_random_engine dre;

	int a[10000];

	for (int& d : a)
		d = uid(dre);

	sort(begin(a), end(a));

	ofstream out("정수만개오름차순.dat");

	int cnt = 1;
	for (int d : a)
	{
		if (cnt++ % 10 == 0)
		{
			out << endl;
		}
		out << d << ' ';
	}

	save("소스.cpp");
}

=========================
Tue Mar 12 18:43:26 2019
=========================

//------------------------------------------------------------
//2019.STL 3.12 화9,10
//
// - 자료를 파일에 저장해 보기
// - 정렬한 결과를 파일에 저장하기
//
// - 이 내용을 객체로 (class Dog)
// - smart pointer
// - callable type
// 언제나 그러하듯이 프로그래밍은 훈련을 동반한다.
// 모르면 맞아야지
// - 알고리즘 시간재기
// 구분자를 넣어도 문법 오류가 아님!
//------------------------------------------------------------
#include "save.h"
#include <random>
using namespace std;

//정수 만개를 랜덤값으로 초기화 정렬 후, (uid(dre), 0, 100'000)
//"정수만개오름차순.dat"으로 저장
//파일 크기를 생각하면서 작성


//정수 만개를 저장하려면 필요한 공간은 몇 바이트인가?
int main()
{
	uniform_int_distribution<> uid(0,100'000);
	default_random_engine dre;

	int a[10000];

	for (int& d : a)
		d = uid(dre);

	sort(begin(a), end(a));

	ofstream out("정수만개오름차순.dat");

	out.write((char*)a, 10'000 * sizeof(int));

	save("소스.cpp");
}

=========================
Tue Mar 12 18:46:43 2019
=========================

//------------------------------------------------------------
//2019.STL 3.12 화9,10
//
// - 자료를 파일에 저장해 보기
// - 정렬한 결과를 파일에 저장하기
//
// - 이 내용을 객체로 (class Dog)
// - smart pointer
// - callable type
// 언제나 그러하듯이 프로그래밍은 훈련을 동반한다.
// 모르면 맞아야지
// - 알고리즘 시간재기
// 구분자를 넣어도 문법 오류가 아님!
//------------------------------------------------------------
#include "save.h"
#include <random>
using namespace std;

//정수 만개를 랜덤값으로 초기화 정렬 후, (uid(dre), 0, 100'000)
//"정수만개오름차순.dat"으로 저장
//파일 크기를 생각하면서 작성


//정수 만개를 저장하려면 필요한 공간은 몇 바이트인가? -> 4만 바이트
//파일은 2가지 모드로 열 수 있다.
// 1. default: text mode 또는 binary mode가 있다.
int main()
{
	uniform_int_distribution<> uid(0,100'000);
	default_random_engine dre;

	int a[10000];

	for (int& d : a)
		d = uid(dre);

	sort(begin(a), end(a));

	ofstream out("정수만개오름차순.dat",ios::binary);

	out.write((char*)a, 10'000 * sizeof(int));

	save("소스.cpp");
}

=========================
Tue Mar 12 18:54:18 2019
=========================

//------------------------------------------------------------
//2019.STL 3.12 화9,10
//
// - 자료를 파일에 저장해 보기
// - 정렬한 결과를 파일에 저장하기
//
// - 이 내용을 객체로 (class Dog)
// - smart pointer
// - callable type
// 언제나 그러하듯이 프로그래밍은 훈련을 동반한다.
// 모르면 맞아야지
// - 알고리즘 시간재기
// 구분자를 넣어도 문법 오류가 아님!
//------------------------------------------------------------
#include "save.h"
#include <random>
using namespace std;

//파일 "정수만개오름차순.dat" 에는 정렬된 정수 만개가 바이너리로 저장되어 있다.
//이 파일을 읽어 화면에 출력하라.
int main()
{
	ofstream out("정수만개오름차순.dat", ios::binary);
	out.rdbuf();
	save("소스.cpp");
}

=========================
Tue Mar 12 18:54:30 2019
=========================

//------------------------------------------------------------
//2019.STL 3.12 화9,10
//
// - 자료를 파일에 저장해 보기
// - 정렬한 결과를 파일에 저장하기
//
// - 이 내용을 객체로 (class Dog)
// - smart pointer
// - callable type
// 언제나 그러하듯이 프로그래밍은 훈련을 동반한다.
// 모르면 맞아야지
// - 알고리즘 시간재기
// 구분자를 넣어도 문법 오류가 아님!
//------------------------------------------------------------
#include "save.h"
#include <random>
using namespace std;

//파일 "정수만개오름차순.dat" 에는 정렬된 정수 만개가 바이너리로 저장되어 있다.
//이 파일을 읽어 화면에 출력하라.
int main()
{
	ofstream out("정수만개오름차순.dat", ios::binary);
	out.rdbuf();
	save("소스.cpp");
}

=========================
Tue Mar 12 18:54:56 2019
=========================

//------------------------------------------------------------
//2019.STL 3.12 화9,10
//
// - 자료를 파일에 저장해 보기
// - 정렬한 결과를 파일에 저장하기
//
// - 이 내용을 객체로 (class Dog)
// - smart pointer
// - callable type
// 언제나 그러하듯이 프로그래밍은 훈련을 동반한다.
// 모르면 맞아야지
// - 알고리즘 시간재기
// 구분자를 넣어도 문법 오류가 아님!
//------------------------------------------------------------
#include "save.h"
#include <random>
using namespace std;

//파일 "정수만개오름차순.dat" 에는 정렬된 정수 만개가 바이너리로 저장되어 있다.
//이 파일을 읽어 화면에 출력하라.
int main()
{
	uniform_int_distribution<> uid(0,100'000);
	default_random_engine dre;

	int a[10000];

	for (int& d : a)
		d = uid(dre);

	sort(begin(a), end(a));

	ofstream out("정수만개오름차순.dat",ios::binary);

	out.write((char*)a, 10'000 * sizeof(int));

	save("소스.cpp");
}

=========================
Tue Mar 12 19:01:49 2019
=========================

//------------------------------------------------------------
//2019.STL 3.12 화9,10
//
// - 자료를 파일에 저장해 보기
// - 정렬한 결과를 파일에 저장하기
//
// - 이 내용을 객체로 (class Dog)
// - smart pointer
// - callable type
// 언제나 그러하듯이 프로그래밍은 훈련을 동반한다.
// 모르면 맞아야지
// - 알고리즘 시간재기
// 구분자를 넣어도 문법 오류가 아님!
//------------------------------------------------------------
#include "save.h"
#include <random>
#include <iomanip>
using namespace std;

//파일 "정수만개오름차순.dat" 에는 정렬된 정수 만개가 바이너리로 저장되어 있다.
//이 파일을 읽어 화면에 출력하라.
//파일 아파에는 파일의 정보를 가지고 있는 헤더가 있다.
int main()
{
	ifstream in("정수만개오름차순.dat", ios::binary);
	int* a = new int[10000];
	in.read((char*)a, 40000);

	int cnt = 1;
	for (int i = 0; i < 10000; ++i)
	{
		cout << setw(12) << a[i];
		if (cnt++ % 6 == 0)
			cout << '\n';
	}
	save("소스.cpp");
}